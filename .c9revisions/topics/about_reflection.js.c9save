{"ts":1341252760929,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module(\"About Reflection (topics/about_reflection.js)\");\n\nvar A = function() {\n    this.aprop = \"A\";    \n};\n\nvar B = function() {\n    this.bprop = \"B\";\n};\n\nB.prototype = new A();\n\ntest(\"typeof\", function() {\n    equals(typeof({}), 'object', 'what is the type of an empty object?');\n    equals(typeof('apple'), 'string', 'what is the type of a string?');\n    equals(typeof(-5), 'number', 'what is the type of -5?');\n    equals(typeof(false), 'boolean', 'what is the type of false?');\t\t\n});\n\ntest(\"property enumeration\", function() {\n    var keys = [];\n    var values = [];\n    var person = {name: 'Amory Blaine', age: 102, unemployed: true};\n    for(propertyName in person) {\n        keys.push(propertyName);\n        values.push(person[propertyName]);\n    }\n    ok(keys.equalTo(['name','age','unemployed']), 'what are the property names of the object?');\n    ok(values.equalTo(['Amory Blaine', 102, true]), 'what are the property values of the object?');\n});\n\ntest(\"hasOwnProperty\", function() {\n    var b = new B();\n\n    var keys = [];\n    for (propertyName in b) {\n        keys.push(propertyName);\n    }\n    equals(keys.length, 2, 'how many elements are in the keys array?');\n    ok(keys.equalTo([\"bprop\", \"aprop\"]), 'what are the properties of the array?');\n    // hasOwnProperty returns true if the parameter is a property directly on the object, \n    // but not if it is a property accessible via the prototype chain.\n    var ownKeys = [];\n    for(propertyName in b) {\n        if (b.hasOwnProperty(propertyName)) {\n            ownKeys.push(propertyName);\n        }\n    }\n    equals(ownKeys.length, 1, 'how many elements are in the ownKeys array?');\n    ok(ownKeys.equalTo([\"bprop\"]), 'what are the own properties of the array?');\n});\n\ntest(\"constructor property\", function () {\n    var a = new A();\n    var b = new B();\n    equals(typeof(a.constructor), \"function\", \"what is the type of a's constructor?\");\n    equals(a.constructor.name, \"\", \"what is the name of a's constructor?\");    \n    equals(b.constructor.name, \"\", \"what is the name of b's constructor?\");    \n});\n\ntest(\"eval\", function() {\n    // eval executes a string\n    var result = \"\";\n    eval(\"result = 'apple' + ' ' + 'pie'\");\n    equals(result, 'apple pie', 'what is the value of result?');\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":2266}]],"length":2266}
